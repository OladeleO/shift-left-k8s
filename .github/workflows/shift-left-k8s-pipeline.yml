name: Vulnerable Kubernetes CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

#test

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Install Kind
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
          chmod +x ./kind
          mv ./kind /usr/local/bin/kind

      - name: Create Kubernetes Cluster
        run: |
          kind create cluster --name goat-cluster
          export KUBECONFIG="$(kind get kubeconfig-path --name="goat-cluster")"
          kubectl get nodes

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x ./kubectl
          mv ./kubectl /usr/local/bin/kubectl

      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Clone Kubernetes Goat Repository
        run: |
          git clone https://github.com/madhuakula/kubernetes-goat.git

      - name: List Directory Contents to Confirm Clone
        run: |
          ls -al

      - name: Install Kyverno using Helm
        run: |
          helm repo add kyverno https://kyverno.github.io/kyverno/
          helm repo update
          helm install kyverno kyverno/kyverno --namespace kyverno --create-namespace


      - name: Validate Helm Templates
        run: |
          cd kubernetes-goat/scenarios/metadata-db
          helm lint .

      - name: Deploy Metadata-db Using Helm
        run: |
          cd kubernetes-goat/scenarios/metadata-db
          helm install metadata-db .

      - name: Deploy Kubernetes Goat Using Manifests Recursively (Excluding Metadata-db)
        run: |
          cd kubernetes-goat
          find scenarios/ -type f \( -name '*.yaml' -o -name '*.yml' \) ! -path 'scenarios/metadata-db/*' -print0 | while IFS= read -r -d '' file; do
            kubectl apply -f "$file"
          done
          kubectl get pods -A
      
      - name: Verify Deployment
        run: |
          kubectl get services -A
          kubectl get pods -A
        
      - name: Scan YAML Manifests with kube-score (SAST)
        run: |
          docker run --rm -v $(pwd)/kubernetes-goat/scenarios:/scenarios zegl/kube-score:1.11.0 score /scenarios/*.yaml > kube-score-report.txt
        continue-on-error: true

      - name: Scan Container Images with Trivy (SCA)
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v $(pwd)/trivy-cache:/root/.cache/ aquasecurity/trivy:0.57.0 image madhuakula/kubernetes-goat:latest --severity HIGH,CRITICAL --format json --output trivy-report.json
        continue-on-error: true

      - name: Run Kube-hunter for Security Testing (Penetration Testing)
        run: |
          pip install kube-hunter
          kube-hunter --remote $(kubectl cluster-info | grep 'Kubernetes control plane' | awk '/https/ {print $NF}') --report json > kube-hunter-report.json
        continue-on-error: true

      - name: Run Kube-bench for CIS Benchmark (Compliance)
        run: |
          docker run --rm -v $(pwd)/cfg:/cfg aquasecurity/kube-bench:0.6.9 --json > kube-bench-report.json
        continue-on-error: true

      - name: Monitor Runtime Security with Falco (Runtime Security)
        run: |
          docker run --rm -it --privileged falcosecurity/falco:latest
        continue-on-error: true

      - name: Use Tetragon for eBPF-based Monitoring (Runtime Security)
        run: |
          docker run --rm --privileged cilium/tetragon:0.6.0
        continue-on-error: true

      - name: Upload Reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            kube-score-report.txt
            trivy-report.json
            kube-hunter-report.json
            kube-bench-report.json
            falco-output.txt
            tetragon-output.txt
