name: Vulnerable Kubernetes CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Install Kind
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
          chmod +x ./kind
          mv ./kind /usr/local/bin/kind

      - name: Create Kubernetes Cluster
        run: |
          kind create cluster --name goat-cluster
          export KUBECONFIG="$(kind get kubeconfig-path --name="goat-cluster")"
          kubectl get nodes

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x ./kubectl
          mv ./kubectl /usr/local/bin/kubectl

      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Clone Kubernetes Goat Repository
        run: |
          git clone https://github.com/madhuakula/kubernetes-goat.git

      - name: List Directory Contents to Confirm Clone
        run: |
          ls -al

      - name: Install Kyverno using Helm
        run: |
          helm repo add kyverno https://kyverno.github.io/kyverno/
          helm repo update
          helm install kyverno kyverno/kyverno --namespace kyverno --create-namespace


      - name: Validate Helm Templates
        run: |
          cd kubernetes-goat/scenarios/metadata-db
          helm lint .

      - name: Deploy Metadata-db Using Helm
        run: |
          cd kubernetes-goat/scenarios/metadata-db
          helm install metadata-db .

      - name: Deploy Kubernetes Goat Using Manifests Recursively (Excluding Metadata-db)
        run: |
          cd kubernetes-goat
          find scenarios/ -type f \( -name '*.yaml' -o -name '*.yml' \) ! -path 'scenarios/metadata-db/*' -print0 | while IFS= read -r -d '' file; do
            kubectl apply -f "$file"
          done
          kubectl get pods -A
      
      - name: Verify Deployment
        run: |
          kubectl get services -A
          kubectl get pods -A

      - name: Debug Directory Listing
        run: |
          ls -al -R $(pwd)/kubernetes-goat/scenarios
        
      - name: Scan YAML Manifests with kube-score (SAST)
        run: |
          find $(pwd)/kubernetes-goat/scenarios -type f -name '*.yaml' | while read -r file; do
            relative_path=$(realpath --relative-to=$(pwd)/kubernetes-goat/scenarios "$file")
            docker run --rm -v $(pwd)/kubernetes-goat/scenarios:/scenarios zegl/kube-score:latest score "/scenarios/$relative_path" || echo "Skipping invalid file: $file"
          done > kube-score-report.txt
        shell: bash

      - name: Run kube-bench for CIS Benchmark
        run: |
          docker run --rm --privileged \
            --security-opt apparmor=unconfined \
            -v $(pwd):/host \
            -v /etc:/etc:ro \
            -v /var/lib:/var/lib:ro \
            -v /usr:/usr:ro \
            -v /proc:/proc:ro \
            -v /boot:/boot:ro \
            -v /lib/modules:/lib/modules:ro \
            aquasec/kube-bench:latest node > kube-bench-report.json

      - name: Scan YAML Manifests with kube-score
        run: |
          find $(pwd)/kubernetes-goat/scenarios -type f -name '*.yaml' | while read -r file; do
            relative_path=$(realpath --relative-to=$(pwd)/kubernetes-goat/scenarios "$file")
            docker run --rm -v $(pwd)/kubernetes-goat/scenarios:/scenarios zegl/kube-score:latest score "/scenarios/$relative_path" || echo "Skipping invalid file: $file"
          done > kube-score-report.txt


      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
      
      - name: Run Trivy Scan
        run: |
          trivy fs --severity HIGH,CRITICAL --format json --output trivy-report.json . 
        
      - name: Run Falco and Save Logs
        run: |
          timeout 60s docker run --rm --privileged \
            -v /var/run/docker.sock:/host/var/run/docker.sock \
            -v /proc:/host/proc:ro \
            -v /boot:/host/boot:ro \
            -v /lib/modules:/host/lib/modules:ro \
            -v /usr:/host/usr:ro \
            falcosecurity/falco:latest > falco-output.log 2>&1 || true
      
      # - name: Use Tetragon for eBPF-based Monitoring
      #   run: |
      #     docker run --rm --privileged cilium/tetragon:latest

      - name: Upload Reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            trivy-report.json
            falco-output.log
            kube-bench-report.json
            kube-score-report.txt
